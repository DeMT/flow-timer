{"version":3,"sources":["start-button/start-button.jsx","remaining-time/remaining-time.jsx","time-setting-block/time-setting-block.jsx","base-timer/base-timer.jsx","rest-time/rest-time.jsx","time-container/time-container.jsx","App.js","serviceWorker.js","index.js"],"names":["StartButton","isRunning","stateHandler","className","onClick","RemainingTime","eventHandler","placeHolder","type","placeholder","onChange","TimeSettingBlock","isInSession","timeSetter","isDisplay","e","BaseTimer","this","r","totalLength","completedRatio","props","now_length","remaningTime","colorHandler","viewBox","id","strokeDasharray","d","Date","toISOString","substr","Component","RestTime","restTime","TimeContainer","oneSecondStep","state","remaning_time","delta_time","now","starting_time","setState","resting_time","restingStep","audio","play","progressCaculator","set_total_time","timerRemaningLengthCaculator","timeLeftRaito","set_hr","set_min","rest_time_out_id","running_time_out_id","Audio","prevProps","prevState","document","getElementsByTagName","innerHTML","result_time","clearTimeout","setTimeout","unit","target","value","replace","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.326c6bce.chunk.js","sourcesContent":["import React from 'react'\nimport './start-button.style.scss'\n\nexport const StartButton = ({ isRunning, stateHandler }) => {\n    return (\n        <div className={isRunning ? 'btn pause' : 'btn start'} onClick={\n            stateHandler}>\n            {isRunning ? 'Pause' : 'Start'}\n\n        </div>\n    )\n}","import React from 'react'\nimport './remaining-time.style.scss'\n\nexport const RemainingTime = ({ eventHandler, placeHolder }) => {\n\n    return (\n        < input type=\"text\" className='remaining-time-box' placeholder=\" \"\n            onChange={eventHandler} />)\n}\n","import React from 'react'\nimport { RemainingTime } from '../remaining-time/remaining-time'\nimport './time-setting-block.style.scss'\n\n\n\n\nexport const TimeSettingBlock = ({ isRunning, isInSession, timeSetter, ...props }) => {\n    let isDisplay = isInSession ? \"hide\" : \"\"\n    return (\n        < div className={\"time-setting-block \" + isDisplay} >\n            <div className=\"time-block hours-input\">\n                <RemainingTime\n                    eventHandler={\n                        (e) => timeSetter(e, 'hours')\n                    }\n                    placeHolder=\"02\"\n                />\n                <label className=\"block-label hr\">Hr</label>\n            </div>\n            <span className=\"time-setting-block separator\">:</span>\n            <div className=\"time-block minutes-input\">\n                <RemainingTime\n                    placeHolder=\"00\"\n                    eventHandler={\n                        e => timeSetter(e, 'minutes')\n                    } />\n                <label className=\"block-label min\">mins</label>\n            </div>\n        </div >\n    )\n}","import React from 'react'\nimport './base-timer.style.scss'\nimport { Component } from 'react'\n\nclass BaseTimer extends Component {\n\n    componentDidMount() {\n        this.r = 45\n        this.totalLength = this.r * 2 * 3.1415\n\n    }\n    componentDidUpdate() {\n        let { completedRatio } = this.props\n        this.now_length = completedRatio * this.totalLength\n    }\n\n    render() {\n        let { remaningTime, colorHandler } = this.props\n        return (\n            <div className=\"base-timer\" >\n                <svg className=\"base-timer__svg\" viewBox=\"-50 -50 100 100\">\n                    <g className=\"base-timer__circle\">\n                        <circle className=\"base-timer__path-elapsed\" r={this.r} />\n                        <path\n                            id=\"base-timer-path-remaining\"\n                            className={\"base-timer__path-remaining \" + colorHandler()}\n                            strokeDasharray={`${this.now_length} ${this.totalLength}`}\n                            d=\"\n                        M 0, 100\n                        m -45, 0\n                        a 45,45 0 1,0 90,0\n                        a 45,45 0 1,0 -90,0\n                        \"\n                        ></path>\n                    </g>\n                </svg>\n                <span className=\"base-timer__label\">\n                    {new Date((remaningTime) * 1000).toISOString().substr(11, 8)}\n                </span>\n            </div>\n        )\n    }\n}\nexport default BaseTimer","import React from 'react'\nimport './rest-time.style.scss'\n\nexport const RestTime = ({ restTime }) => {\n    return (\n        \n        < span className=\"rest-time\" > {new Date((restTime) * 1000).toISOString().substr(11, 8)}</span >\n    )\n}","import React, { Component } from 'react'\nimport './time-container.style.scss'\nimport { StartButton } from '../start-button/start-button'\nimport { TimeSettingBlock } from '../time-setting-block/time-setting-block'\nimport BaseTimer from '../base-timer/base-timer'\nimport { RestTime } from '../rest-time/rest-time'\nclass TimeContainer extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            isRunning: false,\n            remaning_time: 0,\n            resting_time: 0,\n            set_hr: 0,\n            set_min: 0,\n            set_total_time: 0,\n            isInSession: false,\n        }\n        this.rest_time_out_id = 0\n        this.running_time_out_id = 0\n        let bell_sound_url = 'http://soundbible.com/grab.php?id=2218&type=wav'\n        this.audio = new Audio(bell_sound_url);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        document.getElementsByTagName('title')[0].innerHTML = new Date((this.state.remaning_time) * 1000).toISOString().substr(11, 8)\n        if (this.state.isRunning) {\n            if (this.state.set_hr > 0 | this.state.set_min > 0) {\n                this.starting_time = Date.now()\n                let result_time = this.state.set_hr * 3600 + this.state.set_min * 60\n                this.setState({ remaning_time: result_time, set_hr: 0, set_min: 0, resting_time: 60, isInSession: true, set_total_time: result_time })\n                return true\n            }\n\n            if (prevState.isRunning !== this.state.isRunning) {\n                this.starting_time = Date.now()\n            }\n\n            // clear timeout from the rest phase, directly kill any timeout that still living.\n            clearTimeout(this.running_time_out_id)\n            clearTimeout(this.rest_time_out_id)\n            this.running_time_out_id = setTimeout(this.oneSecondStep, 500)\n\n            if (this.state.resting_time < 60) {\n                this.setState({ resting_time: 60 })\n            }\n        }\n        // deal with the resting time timeout problem, directly kill all last timeout \n        //since phase changing should cancel other timeout.\n        if (!this.state.isRunning & this.state.isInSession) {\n            clearTimeout(this.rest_time_out_id)\n            clearTimeout(this.running_time_out_id)\n            this.rest_time_out_id = setTimeout(this.restingStep, 500)\n        }\n    }\n\n    oneSecondStep = () => {\n        if (this.state.remaning_time > 0) {\n            let delta_time = (Date.now() - this.starting_time) / 1000\n            this.setState({ remaning_time: this.state.remaning_time - delta_time, resting_time: this.state.resting_time + delta_time / 5 })\n            this.starting_time = Date.now()\n\n        }\n        else if (this.state.remaning_time <= 0) {\n            this.setState({ isInSession: false, isRunning: false })\n        }\n    }\n    restingStep = () => {\n\n        let { resting_time } = this.state\n        if (resting_time > 0) {\n            let delta_time = (Date.now() - this.starting_time) / 1000\n            this.setState({ resting_time: resting_time - delta_time })\n            this.starting_time = Date.now()\n        }\n        else if (resting_time <= 0) {\n\n            this.audio.play();\n            this.setState({ isRunning: true, resting_time: 60 })\n\n        }\n    }\n\n\n    progressCaculator = () => {\n        let { remaning_time, set_total_time, isInSession } = this.state\n        if (!isInSession) {\n            return 'grey'\n        }\n        if ((remaning_time / set_total_time) > 0.5) {\n            return 'start'\n        }\n        else if (remaning_time / set_total_time > 0.25) {\n            return 'middle'\n        }\n        else {\n            return 'end'\n        }\n    }\n\n    timerRemaningLengthCaculator = () => {\n        let timeLeftRaito = this.state.remaning_time / this.state.set_total_time\n        let finalRatio = timeLeftRaito - (1 / this.state.set_total_time) * (1 - timeLeftRaito)\n        return finalRatio\n    }\n\n    render() {\n\n        return (\n            <div className={`time-container${this.state.isRunning ? \"__running\" : \"\"}`}>\n                < BaseTimer remaningTime={this.state.remaning_time}\n                    colorHandler={this.progressCaculator}\n                    completedRatio={this.timerRemaningLengthCaculator()} />\n                <RestTime restTime={this.state.resting_time} />\n                <TimeSettingBlock isRunning={this.state.isRunning} isInSession={this.state.isInSession} timeSetter={(e, unit) => {\n                    e.target.value = e.target.value.replace(/\\D+/g, '')\n                    if (unit === 'hours') {\n                        this.setState({ set_hr: e.target.value })\n                    }\n                    if (unit === 'minutes') {\n                        this.setState({ set_min: e.target.value })\n                    }\n\n\n                }} />\n\n                <StartButton isRunning={this.state.isRunning} stateHandler={\n                    e => this.setState({ isRunning: !this.state.isRunning })\n                } />\n                <div className=\"proceeding-tasks\"></div>\n            </div >\n        )\n    }\n\n}\nexport default TimeContainer;\n","import React, { Component } from 'react';\nimport TimeContainer from './time-container/time-container'\nimport './App.scss';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"page\">\n        <TimeContainer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}